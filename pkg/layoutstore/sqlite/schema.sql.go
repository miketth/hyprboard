// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: schema.sql

package sqlite

import (
	"context"
)

const dumpRest = `-- name: DumpRest :many
select sql
from sqlite_master
where type is not 'table'
and sql not null
order by name
`

func (q *Queries) DumpRest(ctx context.Context) ([]*string, error) {
	rows, err := q.query(ctx, q.dumpRestStmt, dumpRest)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var sql *string
		if err := rows.Scan(&sql); err != nil {
			return nil, err
		}
		items = append(items, sql)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dumpTables = `-- name: DumpTables :many
select sql
from sqlite_master
where type = 'table'
and sql not null
order by name
`

func (q *Queries) DumpTables(ctx context.Context) ([]*string, error) {
	rows, err := q.query(ctx, q.dumpTablesStmt, dumpTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*string
	for rows.Next() {
		var sql *string
		if err := rows.Scan(&sql); err != nil {
			return nil, err
		}
		items = append(items, sql)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
