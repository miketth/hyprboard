// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlite

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.dumpRestStmt, err = db.PrepareContext(ctx, dumpRest); err != nil {
		return nil, fmt.Errorf("error preparing query DumpRest: %w", err)
	}
	if q.dumpTablesStmt, err = db.PrepareContext(ctx, dumpTables); err != nil {
		return nil, fmt.Errorf("error preparing query DumpTables: %w", err)
	}
	if q.getLayoutsForAppStmt, err = db.PrepareContext(ctx, getLayoutsForApp); err != nil {
		return nil, fmt.Errorf("error preparing query GetLayoutsForApp: %w", err)
	}
	if q.setLayoutStmt, err = db.PrepareContext(ctx, setLayout); err != nil {
		return nil, fmt.Errorf("error preparing query SetLayout: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.dumpRestStmt != nil {
		if cerr := q.dumpRestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dumpRestStmt: %w", cerr)
		}
	}
	if q.dumpTablesStmt != nil {
		if cerr := q.dumpTablesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing dumpTablesStmt: %w", cerr)
		}
	}
	if q.getLayoutsForAppStmt != nil {
		if cerr := q.getLayoutsForAppStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLayoutsForAppStmt: %w", cerr)
		}
	}
	if q.setLayoutStmt != nil {
		if cerr := q.setLayoutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setLayoutStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	dumpRestStmt         *sql.Stmt
	dumpTablesStmt       *sql.Stmt
	getLayoutsForAppStmt *sql.Stmt
	setLayoutStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		dumpRestStmt:         q.dumpRestStmt,
		dumpTablesStmt:       q.dumpTablesStmt,
		getLayoutsForAppStmt: q.getLayoutsForAppStmt,
		setLayoutStmt:        q.setLayoutStmt,
	}
}
