// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: layouts.sql

package sqlite

import (
	"context"
)

const getLayoutsForApp = `-- name: GetLayoutsForApp :many
select app, device, code, variant
from last_layouts
where app = ?
`

func (q *Queries) GetLayoutsForApp(ctx context.Context, app string) ([]LastLayout, error) {
	rows, err := q.db.QueryContext(ctx, getLayoutsForApp, app)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LastLayout
	for rows.Next() {
		var i LastLayout
		if err := rows.Scan(
			&i.App,
			&i.Device,
			&i.Code,
			&i.Variant,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setLayout = `-- name: SetLayout :exec
insert into last_layouts (app, device, code, variant)
values (?1, ?2, ?3, ?4)
on conflict do update
set code = ?3, variant = ?4
`

type SetLayoutParams struct {
	App     string
	Device  string
	Code    string
	Variant string
}

func (q *Queries) SetLayout(ctx context.Context, arg SetLayoutParams) error {
	_, err := q.db.ExecContext(ctx, setLayout,
		arg.App,
		arg.Device,
		arg.Code,
		arg.Variant,
	)
	return err
}
